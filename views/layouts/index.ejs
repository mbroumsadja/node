<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/css/app.css">
    <link rel="shortcut icon" href="/img/Fichier 4.svg" type="image/x-icon">
    <title>shedule</title>
</head>
<body>
    
    <header>   
        <button type="button" id="weekView">
            <i class="fas fa-calendar-week"></i>
        </button>
        <button type="button" id="refreshBtn">
            <i class="fas fa-sync-alt"></i>
        </button>
        <div class="header-title">schedule</div>
    </header>

    <div class="pull-indicator" id="pullIndicator">
        <i class="fas fa-arrow-down"></i> &nbsp; Tirez pour actualiser
    </div>

    <div class="date-navigator" id="dateNavigator">
        <!-- Les dates seront générées dynamiquement -->
    </div>

    <div class="search-container">
        <div class="search-box">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="Rechercher un cours, un prof..." id="searchInput">
        </div>
    </div>

    <div class="container" id="scheduleContainer">
        <!-- Le contenu sera généré dynamiquement -->
    </div>

    <div class="tab-bar">
        <button class="tab-item active" id="a">
            <i class="fas fa-calendar-alt"></i>
            <span>Cours</span>
        </button>
        <button class="tab-item" id="b">
            <i class="fas fa-envelope"></i>
            <span>message</span>
        </button>
        <button class="tab-item" id="c">
            <i class="fas fa-user"></i>
            <span>profil</span>
        </button>
    </div>

    <script>
        // Fonction pour récupérer un cookie par son nom
        function getCookie() {
            const name = "etudiant";
            const value = `${document.cookie}`;
            const parts = value.split(';').find(part => part.trim().startsWith(`${name}=`));
            if (parts) return parts.split('=')[1];
            return null;
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Récupérer le cookie étudiant
            const studentCookie = getCookie();
            console.log(studentCookie);
            const matricule = studentCookie;

            if (!matricule) {
                window.location.href = '/login';
                return;
            }
            
            const dateNavigator = document.getElementById('dateNavigator');
            const scheduleContainer = document.getElementById('scheduleContainer');
            const searchInput = document.getElementById('searchInput');
            const tabItems = document.querySelectorAll('.tab-item');
            const pullIndicator = document.getElementById('pullIndicator');
            let scheduleData = [];

            // Vérifier si l'utilisateur est connecté
            if (!matricule) {
                scheduleContainer.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-sign-in-alt"></i>
                        <p>Veuillez vous connecter pour voir votre emploi du temps.</p>
                        <a href="/login">Se connecter</a>
                    </div>
                `;
                return;
            }

            // Fonction pour récupérer les données depuis l'API
            async function fetchScheduleData() {
                try {
                    const response = await fetch(`http://localhost:3001/seance/${matricule}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`Erreur ${response.status}: ${response.statusText}`);
                    }

                    const data = await response.json();
                    if (data.success) {
                        // Normaliser les données pour les adapter à notre interface
                        scheduleData = data.seances.map(course => ({
                            ...course,
                            // Convertir le format de date "04-04-2025" en "Vendredi 4 avril"
                            jourSemaine: formatDateToDay(course.jour),
                            // Convertir "08:00" en "08h00"
                            debut: course.debut.replace(':', 'h'),
                            fin: course.fin.replace(':', 'h')
                        }));
                        return scheduleData;
                    } else {
                        throw new Error(data.message || 'Erreur lors de la récupération des données');
                    }
                } catch (error) {
                    console.error('Erreur API:', error);
                    scheduleContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-exclamation-triangle"></i>
                            <p>Erreur: ${error.message}. Veuillez réessayer.</p>
                        </div>
                    `;
                    return [];
                }
            }

            // Fonction pour formater la date en jour de la semaine
            function formatDateToDay(dateString) {
                const days = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];
                const months = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'];
                
                const [day, month, year] = dateString.split('-');
                const date = new Date(year, month - 1, day);
                
                return `${days[date.getDay()]} ${date.getDate()} ${months[date.getMonth()]}`;
            }

            // Générer le navigateur de dates
            function generateDateNavigator() {
                const days = ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'];
                const today = new Date();

                dateNavigator.innerHTML = '';

                for (let i = -2; i < 12; i++) {
                    const date = new Date(today);
                    date.setDate(today.getDate() + i);

                    const dateItem = document.createElement('div');
                    dateItem.className = 'date-item';
                    if (i === 0) dateItem.classList.add('active');

                    dateItem.innerHTML = `
                        <div class="date-day">${days[date.getDay()]}</div>
                        <div class="date-number">${date.getDate()}</div>
                    `;

                    dateItem.addEventListener('click', () => {
                        document.querySelectorAll('.date-item').forEach(item => item.classList.remove('active'));
                        dateItem.classList.add('active');

                        // Formater la date au même format que l'API (DD-MM-YYYY)
                        const selectedDate = formatDateForAPI(date);
                        const filteredData = scheduleData.filter(item => item.jour === selectedDate);
                        renderSchedule(filteredData);
                    });

                    dateNavigator.appendChild(dateItem);
                }
            }

            // Formater la date au format DD-MM-YYYY
            function formatDateForAPI(date) {
                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                return `${day}-${month}-${year}`;
            }

            // Afficher l'emploi du temps
            function renderSchedule(data) {
                scheduleContainer.innerHTML = '';

                if (!data || data.length === 0) {
                    scheduleContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="far fa-calendar-times"></i>
                            <p>Aucun cours prévu pour cette période</p>
                        </div>
                    `;
                    return;
                }

                // Grouper les cours par jour
                const coursesByDay = {};
                data.forEach(course => {
                    if (!coursesByDay[course.jourSemaine]) {
                        coursesByDay[course.jourSemaine] = [];
                    }
                    coursesByDay[course.jourSemaine].push(course);
                });

                // Trier les cours par heure de début
                Object.keys(coursesByDay).forEach(day => {
                    coursesByDay[day].sort((a, b) => {
                        return convertTimeToMinutes(a.debut) - convertTimeToMinutes(b.debut);
                    });
                });

                // Afficher les cours
                for (const [day, courses] of Object.entries(coursesByDay)) {
                    const daySection = document.createElement('div');
                    daySection.className = 'day-section';
                    
                    const dayHeader = document.createElement('h3');
                    dayHeader.className = 'day-header';
                    dayHeader.textContent = day;
                    daySection.appendChild(dayHeader);

                    courses.forEach(course => {
                        const courseCard = document.createElement('div');
                        courseCard.className = 'course-card';
                        let periode = null
                            if(course.debut === "07h30" && course.fin === "11h30"){
                                periode = "Matine"
                            }if(course.debut === "11h30" || course.debut === "13h30"){
                                periode = "Soire"
                            }if(course.debut === "07h30" && course.fin === "16h30"){
                                 periode = "Journe"
                            }
                        courseCard.innerHTML = `
                            <div class="course-header">
                                <div class="course-name">${course.cours}</div>
                                <div class="course-time">${course.debut} - ${course.fin}</div>
                            </div>
                            <div class="course-details">
                                <div class="details">
                                    <div class="detail-item">
                                    <i class="fas fa-user-tie"></i>
                                    <span>${course.enseignant}</span>
                                </div>
                                <div class="detail-item">
                                    <i class="fas fa-map-marker-alt"></i>
                                    <span>${course.lieu}</span>
                                </div>
                                </div>
                                 <div class="periode">
                                    ${periode}
                                 </div>
                            </div>
                        `;
                        daySection.appendChild(courseCard);
                    });
                    
                    scheduleContainer.appendChild(daySection);
                }

                // Ajouter la date de mise à jour
                const lastUpdate = new Date().toLocaleString('fr-FR', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                const updateInfo = document.createElement('p');
                updateInfo.className = 'refresh-hint';
                updateInfo.textContent = `Mis à jour: ${lastUpdate}`;
                scheduleContainer.appendChild(updateInfo);
            }

            // Convertir l'heure en minutes pour le tri
            function convertTimeToMinutes(timeStr) {
                const [hours, minutes] = timeStr.replace('h', ':').split(':');
                return parseInt(hours) * 60 + parseInt(minutes || 0);
            }

            // Recherche
            searchInput.addEventListener('input', () => {
                const searchTerm = searchInput.value.toLowerCase();
                const filteredData = scheduleData.filter(item =>
                    item.cours.toLowerCase().includes(searchTerm) ||
                    item.enseignant.toLowerCase().includes(searchTerm) ||
                    item.lieu.toLowerCase().includes(searchTerm)
                );
                renderSchedule(filteredData);
            });

            // Navigation entre onglets
            tabItems.forEach(item => {
                item.addEventListener('click', () => {
                    tabItems.forEach(i => i.classList.remove('active'));
                    item.classList.add('active');

                    const tabId = item.id;
                    switch (tabId) {
                        case 'a': // Cours
                            renderSchedule(scheduleData);
                            break;
                    }
                });
            });

            // Pull-to-refresh
            let startY, currentY;
            document.addEventListener('touchstart', e => {
                if (window.scrollY === 0) {
                    startY = e.touches[0].clientY;
                }
            });

            document.addEventListener('touchmove', e => {
                if (startY && window.scrollY === 0) {
                    currentY = e.touches[0].clientY;
                    const diff = currentY - startY;
                    if (diff > 30) {
                        pullIndicator.classList.add('visible');
                    } else {
                        pullIndicator.classList.remove('visible');
                    }
                }
            });

            document.addEventListener('touchend', async () => {
                if (pullIndicator.classList.contains('visible')) {
                    pullIndicator.innerHTML = '<i class="fas fa-spinner fa-spin" style="font-size:50px;color:#2196F3"></i>';
                    const updatedData = await fetchScheduleData();
                    setTimeout(() => {
                        pullIndicator.classList.remove('visible');
                        pullIndicator.innerHTML = '<i class="fas fa-arrow-down"></i> Tirez pour actualiser';
                        renderSchedule(updatedData);
                    }, 1500);
                }
                startY = null;
            });

            // Gestion de la vue semaine
            document.getElementById('weekView').addEventListener('click', () => {
                renderSchedule(scheduleData);
            });

            // Gestion du refresh
            document.getElementById('refreshBtn').addEventListener('click', async () => {
                const updatedData = await fetchScheduleData();
                renderSchedule(updatedData);
            });

            // Initialisation
            async function init() {
                const data = await fetchScheduleData();
                generateDateNavigator();
                renderSchedule(data);
            }
            init();
        });
    </script>
</body>
</html>